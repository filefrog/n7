(set K
  (lambda (x)
    x))

(set not
  (lambda (test)
    (eq test nil)))

(set null?
  (lambda (x)
    (eq x nil)))

(set ne
  (lambda (x y)
    (not (eq x y))))

(set is-a?
  (lambda (vtype obj)
    (eq vtype (typeof obj))))

(set cons?
  (lambda (obj)
    (is-a? 'cons obj)))

(set atom?
  (lambda (obj)
    (not (cons? obj))))

(set *N7-DEBUG-LEVEL* 0)
(set n/debugx
  (lambda (n msg)
    (if (nil? msg)
      (set *N7-DEBUG-LEVEL* n)
      (if (>= n *N7-DEBUG-LEVEL)
        (apply 'prs msg)))))

(set caar (lambda (l) (car (car l))))
(set cadr (lambda (l) (car (cdr l))))
(set cdar (lambda (l) (cdr (car l))))
(set cddr (lambda (l) (cdr (cdr l))))

(set ++ (lambda (x) (+ 1 x)))

;(fun nil? (x)
;     (eq x nil))
;(fun pr (x)
;     (prs x)
;     t)
;(macro fn (name args &body body)
;  `(set ,name (lambda ,args (do ,body))))
;(fn ++ (x)
;  (+ 1 x))
