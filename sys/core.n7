; (fn +1 (x) (+ x 1))
(macro fn (name args body)
       `(set ,name
             (lambda
               ,args
               ,body)))

(fn K (x) x)

(fn not (x)
    (eq x nil))

(fn nil? (x)
    (not x))

(fn ne (x y)
    (not (eq x y)))

(fn is-a? (type obj)
    (eq type (typeof obj)))

(fn cons? (obj)
    (is-a? 'cons obj))

(fn list? (obj)
    (or (nil? obj) (cons? obj)))

(fn atom? (obj)
    (not (cons? obj)))

(fn fn? (obj)
    (is-a? 'function obj))

(fn sym? (obj)
    (is-a? 'symbol obj))

(fn num? (obj)
    (is-a? 'fixnum obj))
;; int? float? ratio? real? complex?

(fn string? (obj)
    (is-a? 'string obj))
;; char?

(fn <= (x y)
    (or (eql x y) (< x y)))

(fn >= (x y)
    (or (eql x y) (> x y)))

(set *N7-DEBUG-LEVEL* 0)
(fn n/debugx (n msg)
    (if (nil? msg)
      (set *N7-DEBUG-LEVEL* n)
      (if (>= n *N7-DEBUG-LEVEL*)
        (apply 'prs msg))))

(fn caar (l) (car (car l)))
(fn cadr (l) (car (cdr l)))
(fn cdar (l) (cdr (car l)))
(fn cddr (l) (cdr (cdr l)))

(fn ++ (x) (+ 1 x))
(fn -- (x) (- 1 x))

(fn say (&rest msg)
    (if (nil? msg)
      (prs "\n")
      (do
        (prs (car msg))
        ;)))
        (apply say (cdr msg)))))
