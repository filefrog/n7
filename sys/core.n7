; (fn +1 (x) (+ x 1))
(macro fn (name args body)
       `(set ,name
             (lambda
               ,args
               ,body)))

(set K
  (lambda (x)
    x))

(set not
  (lambda (test)
    (eq test nil)))

(set nil?
  (lambda (x)
    (eq x nil)))

(set ne
  (lambda (x y)
    (not (eq x y))))

(set is-a?
  (lambda (vtype obj)
    (eq vtype (typeof obj))))

(set cons?
  (lambda (obj)
    (is-a? 'cons obj)))

(set atom?
  (lambda (obj)
    (not (cons? obj))))

(set fn?
  (lambda (obj)
    (is-a? 'function obj)))

(set sym?
  (lambda (obj)
    (is-a? 'symbol obj)))

(set num?
  (lambda (obj)
    (is-a? 'fixnum obj)))

(set string?
  (lambda (obj)
    (is-a? 'string obj)))

(set <= (lambda (x y)
          (or (eql x y) (< x y))))
(set >= (lambda (x y)
          (or (eql x y) (> x y))))

(set *N7-DEBUG-LEVEL* 0)
(set n/debugx
  (lambda (n msg)
    (if (nil? msg)
      (set *N7-DEBUG-LEVEL* n)
      (if (>= n *N7-DEBUG-LEVEL*)
        (apply 'prs msg)))))

(set caar (lambda (l) (car (car l))))
(set cadr (lambda (l) (car (cdr l))))
(set cdar (lambda (l) (cdr (car l))))
(set cddr (lambda (l) (cdr (cdr l))))

(set ++ (lambda (x) (+ 1 x)))
(set -- (lambda (x) (- 1 x)))

;(fun nil? (x)
;     (eq x nil))
;(fun pr (x)
;     (prs x)
;     t)
;(macro fn (name args &body body)
;  `(set ,name (lambda ,args (do ,body))))
;(fn ++ (x)
;  (+ 1 x))
